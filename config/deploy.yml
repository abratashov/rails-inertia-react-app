# Name of your application. Used to uniquely configure containers.
service: <%= ENV['DOCKER_CONTAINER'] %>

# Name of the container image.
image: <%= ENV['DOCKER_IMAGE'] %>

# Credentials for your image host.
registry:
  server: <%= ENV['DOCKER_SERVER'] %>
  username: <%= ENV['DOCKER_USERNAME'] %>
  password:
    - DOCKER_REGISTRY_PASSWORD

ssh:
  user: <%= ENV['SERVER_USER'] %>

# ENV https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
<% if ENV['CI'] %>

# Gitlab doesn't support caching
builder:
  multiarch: false
  remote:
    arch: amd64
    host: ssh://<%= ENV['SERVER_USER'] %>@<%= ENV['SERVER_IP'] %>

<% else %>

# Local https://kamal-deploy.org/docs/configuration/builders/#using-local-builder-for-single-arch
builder:
  cache:
    type: registry
  remote:
    arch: amd64

<% end %>

servers:
  web:
    hosts:
      - <%= ENV['SERVER_IP'] %>
    labels:
      # Enable SSL
      traefik.http.routers.web_app.rule: Host(`<%= ENV['SERVER_HOSTNAME'] %>`)
      traefik.http.routers.web_app_secure.entrypoints: websecure
      traefik.http.routers.web_app_secure.rule: Host(`<%= ENV['SERVER_HOSTNAME'] %>`)
      traefik.http.routers.web_app_secure.tls: true
      traefik.http.routers.web_app_secure.tls.certresolver: letsencrypt
      # Enable GZip compression
      # curl https://your.host --silent -H "Accept-Encoding: gzip,deflate" --write-out "%{size_download}\n" --output /dev/null
      traefik.http.routers.web_app_secure.middlewares: "traefik-compress"
      traefik.http.middlewares.traefik-compress.compress: true

# Map folders with files and images
# $ sudo mkdir /data && sudo chmod 777 -R /data
volumes:
  - "/data/storage:/rails/storage"

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    RAILS_ENV: production
    RACK_ENV: production
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true
  secret:
    ################################################# Server
    # - SERVER_USER
    # - SERVER_IP
    # - SERVER_HOSTNAME
    # - SERVER_SSL_EMAIL
    ################################################# DB Redis
    # - REDIS_PASSWORD
    - REDIS_URL
    ################################################# OTHER
    - RAILS_MASTER_KEY

asset_path: /rails/public/assets

# Use accessory services (secrets come from .env).
accessories:
  redis:
    image: redis:7.0
    host: <%= ENV['SERVER_IP'] %>
    port: 6379
    cmd: "redis-server --requirepass <%= ENV['REDIS_PASSWORD'] %>"
    directories:
      - data:/data

traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    # Enable SSL
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"

    # Enable Strict SSL mode in Cloudflare to solve the redirection conflict
    # https://stackoverflow.com/questions/53082591/setting-up-traefik-with-le-integration-error-too-many-redirects-302
    # entryPoints.web.http.redirections.entryPoint.to: websecure
    # entryPoints.web.http.redirections.entryPoint.scheme: https
    # entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: <%= ENV['SERVER_SSL_EMAIL'] %>
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web
